/** 
 *  CREATE HUFF EXERCISE
 *  
 *  The task is to deploy this contract with a function `makeContract()` which when called creates a contract
 *  that when called with any data returns `0xcaffe`.
 *  The call to `makeContract` should return the address of the newly created contract.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function makeContract() payable returns(address)


 #define macro MAIN() = takes(0) returns(0) {
    // Check that the person calls makeContract()
    0x00 calldataload 0xe0 shr // [sig]
    __FUNC_SIG(makeContract) eq // [sig == selector(makeContract())]
    makeContract jumpi // []
    0x00 0x00 revert

    makeContract:
        // we want to create a contract from a contract, we can use CREATE or CREATE2.
        // let's use CREATE as it's simpler

        /**
        * This is the code that we want our final deployed smart contract to run
        in huff
        [RETURN_OPCODE] [PUSH0_OPCODE] 0x20 // [0x20, 0x5f, 0xf3]
        [MSTORE_OPCODE] [PUSH0_OPCODE] 0xcaffe // [0xcaffe, 0x5F, 0x52, 0x20, 0x5f, 0xf3]
        */


        0x00000000000000000000000000000000000000000069620caffe5f5260205ff3 // [0x69620caffe5f5260205ff3]

        0xA8 shl // [0x69620caffe5f5260205ff3000000000000000000000000000000000000000000]

        0x00 mstore // []

        0x000000000000000000000000000000000000000000000000005f52601a6016f3 // [0x5f52600a6016f3]

        0xC8 shl // [0x5f52600a6016f300000000000000000000000000000000000000000000000000]

        0x0b mstore // []

        // CREATE STEP
        0x12 // [size]
        0x00 // [offset, size]
        0x00 // [value, offset, size]
        create // [address]
        dup1 // [address, address]
        0x00 eq // [address == 0, address]
        revertFlow jumpi // [address]
        0x40 mstore // []
        0x20 0x40 return

        revertFlow:
            0x00 0x00 revert
 }