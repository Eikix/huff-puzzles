/** 
 *  BASIC_BANK HUFF EXERCISE
 *  
 *  The task is to create a basic bank with huff
 * functionalities include
 *      - depositing tokens via similar to how solidity's `receive` function works
 *      - withdrawing tokens
 *      - keeping track of and viewing balance
 */

// Import
#include "./Hashmap.huff"

#define constant BANK_SLOT = FREE_STORAGE_POINTER()

#define function balanceOf(address) payable returns(uint256)
#define function withdraw(uint256) payable returns()

#define macro MAIN() = takes(0) returns(0) {

    // BalanceOf
    0x00 calldataload 0xe0 shr // sig
    dup1 // [sig, sig]
    __FUNC_SIG(balanceOf) eq // [sig == balanceOf, sig]
    checkmygold jumpi // [sig]

    // WithDraw
    __FUNC_SIG(withdraw) eq // [sig == withdraw]
    gimmemygold jumpi // []

    // Receive()
    callvalue
    caller // [caller, msg.value]
    [BANK_SLOT] // [slot, caller, msg.value]
    LOAD_ELEMENT_FROM_KEYS(0x00) // [balance, msg.value]
    add // [balance + msg.value]
    caller // [caller, new_value]
    [BANK_SLOT] // [slot, caller, new_value]
    STORE_ELEMENT_FROM_KEYS(0x00) // []
    0x00 0x00 return



    checkmygold:
        caller // [caller]
        [BANK_SLOT] // [slot, caller]
        LOAD_ELEMENT_FROM_KEYS(0x00) // [balance]
        0x00 mstore
        0x20 0x00 return


    gimmemygold:
        0x00 0x00 0x00 0x00 // [0x00, 0x00, 0x00, 0x00]
        0x04 calldataload // [amount, 0x00, 0x00, 0x00, 0x00]

        // Check that the user has enough balance in the bank, no cheating!
        dup1 // [amount, amount, 0x00, 0x00, 0x00, 0x00]
        caller // [caller, amount, amount, 0x00, 0x00, 0x00, 0x00]
        [BANK_SLOT] // [slot, caller, amount, amount, 0x00, 0x00, 0x00, 0x00]
        LOAD_ELEMENT_FROM_KEYS(0x00) // [balance, amount, amount, 0x00, 0x00, 0x00, 0x00]

        lt // [balance < amount, amount, 0x00, 0x00, 0x00, 0x00]
        swipernoswiping jumpi // [amount, 0x00, 0x00, 0x00, 0x00]

        // Resume send
        caller // [caller, amount, 0x00, 0x00, 0x00, 0x00]
        gas // [gas, address, msg.value, 0x00, 0x00, 0x00, 0x00]
        call
        iszero
        failedcall jumpi // []

        0x04 calldataload // [amount]
        caller [BANK_SLOT] LOAD_ELEMENT_FROM_KEYS(0x00) // [balance, amount]
        sub // [balance - amount]
        caller [BANK_SLOT] STORE_ELEMENT_FROM_KEYS(0x00)

        0x00 0x00 return


    swipernoswiping:
        0x00 0x00 revert
    failedcall:
        0x00 0x00 revert
}